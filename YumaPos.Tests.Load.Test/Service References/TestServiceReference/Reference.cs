//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YumaPos.Tests.Load.Client.TestServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        string Register(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTasks", ReplyAction="http://tempuri.org/IService/GetTasksResponse")]
        YumaPos.Tests.Load.Infrastucture.Dto.TestTaskDto[] GetTasks(string clientToken, int maxInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTasks", ReplyAction="http://tempuri.org/IService/GetTasksResponse")]
        System.Threading.Tasks.Task<YumaPos.Tests.Load.Infrastucture.Dto.TestTaskDto[]> GetTasksAsync(string clientToken, int maxInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Report", ReplyAction="http://tempuri.org/IService/ReportResponse")]
        void Report(int clientId, [System.ServiceModel.MessageParameterAttribute(Name="report")] YumaPos.Tests.Load.Infrastucture.Dto.ReportDto report1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Report", ReplyAction="http://tempuri.org/IService/ReportResponse")]
        System.Threading.Tasks.Task ReportAsync(int clientId, YumaPos.Tests.Load.Infrastucture.Dto.ReportDto report);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : YumaPos.Tests.Load.Client.TestServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<YumaPos.Tests.Load.Client.TestServiceReference.IService>, YumaPos.Tests.Load.Client.TestServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Register(string clientId) {
            return base.Channel.Register(clientId);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string clientId) {
            return base.Channel.RegisterAsync(clientId);
        }
        
        public YumaPos.Tests.Load.Infrastucture.Dto.TestTaskDto[] GetTasks(string clientToken, int maxInstance) {
            return base.Channel.GetTasks(clientToken, maxInstance);
        }
        
        public System.Threading.Tasks.Task<YumaPos.Tests.Load.Infrastucture.Dto.TestTaskDto[]> GetTasksAsync(string clientToken, int maxInstance) {
            return base.Channel.GetTasksAsync(clientToken, maxInstance);
        }
        
        public void Report(int clientId, YumaPos.Tests.Load.Infrastucture.Dto.ReportDto report1) {
            base.Channel.Report(clientId, report1);
        }
        
        public System.Threading.Tasks.Task ReportAsync(int clientId, YumaPos.Tests.Load.Infrastucture.Dto.ReportDto report) {
            return base.Channel.ReportAsync(clientId, report);
        }
    }
}
