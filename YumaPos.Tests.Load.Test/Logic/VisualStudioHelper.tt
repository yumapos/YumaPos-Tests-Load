<#@ assembly name="System.Core" #>
<#@ template hostspecific="True" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# 
    // create an instance of the AutomationHelper class so 
    // that it is accessible from everywhere within the template
    this.VisualStudioHelper = new AutomationHelper(this.Host);
#><#+
/// <summary>
/// Object that provides functionality for automating Visual Studio.
/// </summary>
public AutomationHelper VisualStudioHelper;

/// <summary>
/// This class provides functionality for automating Visual Studio.
/// </summary>
public class AutomationHelper 
{
        
    /// <summary>
    /// Creates a new instance of this class
    /// </summary>
    public AutomationHelper(object host)
    {
        // store a reference to the template host
        // we will need this frequently
        this.Host = host as ITextTemplatingEngineHost;
    }
    
    private EnvDTE.DTE _DTE = null;
    /// <summary>
    /// Returns a reference to the primary management object of Visual Studio
    /// <summary>
    public EnvDTE.DTE DTE
    {
        get
        {
            if (_DTE == null)
            {
                var hostServiceProvider = this.Host as IServiceProvider;
                if (hostServiceProvider != null)
                    _DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
            return _DTE;
        }
    }
    
    /// <summary>
    /// Stores a reference to the Host of the t4 template
    /// </summary>
    public ITextTemplatingEngineHost Host { get; private set; }


    #region Solution and Projects
    /// <summary>
    /// Gets the full path of the solution file
    /// </summary>
    public string SolutionFile
    {
        get
        {
            return this.DTE.Solution.FileName;
        }
    }
    /// <summary>
    /// Gets the file name of the currently opened solution.
    /// </summary>
    public string SolutionFileName
    {
        get
        {
            return System.IO.Path.GetFileName(this.DTE.Solution.FileName);
        }
    }
    /// <summary>
    /// Gets the name of the currently opened solution
    /// </summary>
    public string SolutionName
    {
        get
        {
            return this.DTE.Solution.Properties.Item("Name").Value.ToString();
        }
    }

    /// <summary>
    /// Gets a list of all Projects within the solution
    /// </summary>
    public IEnumerable<EnvDTE.Project> GetAllProjects()
    {
        var ret = new List<EnvDTE.Project>();

        // take all projects that are at top level of the solution
        // and recursively search Project folders
        var topLevelProjects = this.DTE.Solution.Projects;

        foreach(EnvDTE.Project project in topLevelProjects)
        {
            if (project.Kind == vsProjectType.SolutionFolder)
                ret.AddRange(GetProjectsFromItemsCollection(project.ProjectItems));
            else
                ret.Add(project);
        }

        return ret;
    }
    /// <summary>
    /// Gets the project object within the current solution by a given project name.
    /// </summary>
    public EnvDTE.Project GetProject(string projectName)
    {
        return this.GetAllProjects()
                   .Where(p => p.Name == projectName)
                   .First();
    }
    /// <summary>
    /// Gets the project containing the .tt-File
    /// </summary>
    public EnvDTE.Project CurrentProject
    {
        get
        {
            return this.FindProjectItem(this.Host.TemplateFile).ContainingProject;
        }
    }
    #endregion

    #region Project Items
    public EnvDTE.ProjectItem FindProjectItem(string fileName)
    {
        return this.DTE.Solution.FindProjectItem(fileName);
    }
    /// <summary>
    /// Gets all project items from the current solution
    /// </summary>
    public IEnumerable<EnvDTE.ProjectItem>GetAllSolutionItems()
    {
        var ret = new List<EnvDTE.ProjectItem>();

        // iterate all projects and add their items
        foreach(EnvDTE.Project project in this.GetAllProjects())
            ret.AddRange(GetAllProjectItems(project));

        return ret;
    }
    /// <summary>
    /// Gets all project items from the current project
    /// </summary>
    public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems()
    {
        // get the project of the template file and reeturn all its items
        var project = this.CurrentProject;
        return GetAllProjectItems(project);
    }
    /// <summary>
    /// Gets all Project items from a given project. 
    /// </summary>
    public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems(EnvDTE.Project project)
    {
        return this.GetProjectItemsRecursively(project.ProjectItems);
    }
    #endregion

    #region Code Model
    /// <summary>
    /// Searches a given collection of CodeElements recursively for objects of the given elementType.
    /// </summary>
    /// <param name="elements">Collection of CodeElements to recursively search for matching objects in.</param>
    /// <param name="elementType">Objects of this CodeModelElement-Type will be returned.</param>
    /// <param name="includeExternalTypes">If set to true objects that are not part of this solution are retrieved, too. E.g. the INotifyPropertyChanged interface from the System.ComponentModel namespace.</param>
    /// <returns>A list of CodeElement objects matching the desired elementType.</returns>
    public List<EnvDTE.CodeElement> GetAllCodeElementsOfType(EnvDTE.CodeElements elements, EnvDTE.vsCMElement elementType, bool includeExternalTypes)
    {
        var ret = new List<EnvDTE.CodeElement>();

        foreach (EnvDTE.CodeElement elem in elements)
        {
            // iterate all namespaces (even if they are external)
            // > they might contain project code
            if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeNamespace)elem).Members, elementType, includeExternalTypes));
            }
            // if its not a namespace but external
            // > ignore it
            else if (elem.InfoLocation == EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal
                    && !includeExternalTypes)
                continue;
            // if its from the project
            // > check its members
            else if (elem.IsCodeType)
            {
                ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeType)elem).Members, elementType, includeExternalTypes));
            }

            // if this item is of the desired type
            // > store it
            if (elem.Kind == elementType)
                ret.Add(elem);
        }

        return ret;
    }

    public List<EnvDTE.CodeClass> GetClasses(IEnumerable<EnvDTE.ProjectItem> items)
    {
        var ret = new List<EnvDTE.CodeClass>();
        foreach (ProjectItem item in items)
        {
            FileCodeModel codeModel = item.FileCodeModel;
            if (codeModel != null)
            {
                var a = FindClass(codeModel.CodeElements);
                if (a != null)
                {
                    ret.Add(a);
                }
            }
        }
        return ret;
    }

    public List<EnvDTE.CodeInterface> GetInterfaces(IEnumerable<EnvDTE.ProjectItem> items)
    {
        var ret = new List<EnvDTE.CodeInterface>();
        foreach (ProjectItem item in items)
        {
            FileCodeModel codeModel = item.FileCodeModel;
            if (codeModel != null)
            {
                var a = FindInterface(codeModel.CodeElements);
                if (a != null)
                {
                    ret.Add(a);
                }
            }
        }
        return ret;
    }

	    public List<CodeElement> FindImplementedInterfaces(string projectName, string interfaceName)
    {
        List<CodeElement> codeElems = new List<CodeElement> ();
        List<CodeElement> resultItem = new List<CodeElement> ();

        var project = this.GetProject(projectName);
        var projectItems = this.GetAllProjectItems(project);
        var allClasses = this.GetClasses(projectItems);

        foreach (ProjectItem projItem in projectItems)
        {
            if (projItem.FileCodeModel != null)
            {
                codeElems = this.GetAllCodeElementsOfType(projItem.FileCodeModel.CodeElements, vsCMElement.vsCMElementInterface, false);

                if(codeElems.Count != 0)
                {
                    var intrf = codeElems[0];
                    TextPoint firstRow = intrf.StartPoint;

                    string text = firstRow.CreateEditPoint().GetText(200);
                    string findText = interfaceName;
                        
                    if (text.Contains(findText))
                    {
                        resultItem.Add(codeElems[0]);
                    }
                }
            }
        }
            
        return resultItem;
    }

    private CodeClass FindClass(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeClass enumeration = element as CodeClass;
            if (enumeration != null)
                return enumeration;
            enumeration = FindClass(element.Children);
            if (enumeration != null)
                return enumeration;
        }
        return null;
    }

    private CodeInterface FindInterface(CodeElements elements)
    {
        foreach (CodeElement element in elements)
        {
            CodeInterface enumeration = element as CodeInterface;
            if (enumeration != null)
                return enumeration;
            enumeration = FindInterface(element.Children);
            if (enumeration != null)
                return enumeration;
        }
        return null;
    }

	 public List<CodeElement> FindMethodsInInterface(List<CodeElement> elements)
    {
        List<CodeElement> resultItem = new List<CodeElement> ();
            
        foreach (CodeElement elem in elements)
        {
            resultItem = this.GetAllCodeElementsOfType(elem.Collection, vsCMElement.vsCMElementFunction, false);
        }

        return resultItem;
    }

	  public List<CodeElement> FindMethodsInClass (string projectName, List<CodeElement> elements)
    {
        List<CodeElement> codeElems = new List<CodeElement> ();
            
        string className = "";
        string interfaceName = "";

        foreach(CodeElement elem in elements)
        {
            interfaceName = elem.Name;
        }

        var project = this.GetProject(projectName);
        var projectItems = this.GetAllProjectItems(project);
        var allClasses = this.GetClasses(projectItems);

        foreach (CodeClass codeClass in allClasses)
        {
            var allInterfaces = this.GetAllCodeElementsOfType(codeClass.ImplementedInterfaces, vsCMElement.vsCMElementInterface, true);

            if (allInterfaces.Any(x => x.Name == interfaceName))
            {
                className = codeClass.Name;
                var getMethods = this.GetAllCodeElementsOfType(codeClass.Members, vsCMElement.vsCMElementFunction, true);
                codeElems = getMethods;
            }
        }

        return codeElems;
    }

	 public List<CodeElement> FindMethodsInInterface(CodeInterface codeinterface)
    {
        return this.GetAllCodeElementsOfType(codeinterface.Members, vsCMElement.vsCMElementFunction, true);
    }
        
    public List<CodeElement> FindMethodsInClass (CodeClass codeclass)
    {
        return this.GetAllCodeElementsOfType(codeclass.Members, vsCMElement.vsCMElementFunction, true);
    }

	  public List<QueryTemplate> GetAttributeValue (CodeClass codeClass)
    {
        var queryTemplateList = new List<QueryTemplate>();

        foreach (CodeAttribute codeAtr in codeClass.Attributes)
        {
            string attr = codeAtr.Value;

            attr = attr.Replace(" ", "");
                
            var tempList = attr.Split(new[] { ',', '"' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            tempList.RemoveAll(x => x.Contains("="));

            string [] array = tempList.ToArray();

            if (attr.Contains("Select")) {QueryTemplate qt = new QueryTemplate(); qt.Fields = array; qt.QueryType = "Select"; queryTemplateList.Add(qt);}
            if (attr.Contains("Insert")) {QueryTemplate qt = new QueryTemplate(); qt.Fields = array; qt.QueryType = "Insert"; queryTemplateList.Add(qt);}
            if (attr.Contains("Update")) {QueryTemplate qt = new QueryTemplate(); qt.Fields = array; qt.QueryType = "Update"; queryTemplateList.Add(qt);}
            if (attr.Contains("Delete")) {QueryTemplate qt = new QueryTemplate(); qt.Fields = array; qt.QueryType = "Delete"; queryTemplateList.Add(qt);}
                
        }

        return queryTemplateList;
    }



	    public CodeClass FindClassWithBasedClass(string projectName, string className, string implementedClass = null)
    {
        implementedClass = implementedClass ?? "I" + className;

        var project = this.GetProject(projectName);
        var projectItems = this.GetAllProjectItems(project);
        var allClasses = this.GetClasses(projectItems);
        var classesByName = allClasses.Where(x => x.Name == className);
        
        foreach(CodeClass foundClass in classesByName)
        {
            foreach (CodeElement elem in foundClass.ImplementedInterfaces)
            {
                if(elem.Name == implementedClass)
                {
					return foundClass;
                }
            }
        }

        return null;
    }
    #endregion

    #region Auxiliary stuff

    private List<EnvDTE.Project> GetProjectsFromItemsCollection(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.Project>();

        foreach (EnvDTE.ProjectItem item in items)
        {
            if (item.SubProject == null)
                continue;
            else if (item.SubProject.Kind == vsProjectType.SolutionFolder)
                ret.AddRange(GetProjectsFromItemsCollection(item.SubProject.ProjectItems));
            else if (item.SubProject.Kind == vsProjectType.VisualBasic
                        || item.SubProject.Kind == vsProjectType.VisualCPlusPlus
                        || item.SubProject.Kind == vsProjectType.VisualCSharp
                        || item.SubProject.Kind == vsProjectType.VisualJSharp
                        || item.SubProject.Kind == vsProjectType.WebProject)
                ret.Add(item.SubProject);
        }

        return ret;
    }

    public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;

        foreach (EnvDTE.ProjectItem item in items)
        {
            ret.Add(item);
            ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }

        return ret;
    }
    #endregion

    public List<CodeClass> GetClassesByAttributeName(string attributeName, string projectName)
    {
        var attrClasses = new List<CodeClass>();
        var project = this.GetProject(projectName);
        var items = this.GetAllProjectItems(project);
        var myClasses = this.GetClasses(items);

        foreach (CodeClass classes in myClasses)
        {
            foreach (CodeAttribute attr in classes.Attributes)
            {
                if (attr.Name == attributeName)

                    attrClasses.Add(classes);
            }
        }

        return attrClasses;
    }

    public List<CodeInterface> GetInterfacesByAttributeName(string attributeName, string projectName)
    {
        var attrClasses = new List<CodeInterface>();
        var project = this.GetProject(projectName);
        var items = this.GetAllProjectItems(project);
        var myClasses = this.GetInterfaces(items);

        foreach (CodeInterface classes in myClasses)
        {
            foreach (CodeAttribute attr in classes.Attributes)
            {
                if (attr.Name == attributeName)

                    attrClasses.Add(classes);
            }
        }

        return attrClasses;
    }

    public CodeTypeRef GetCodeTypeRefInCodeProperty(CodeProperty codeproperty)
    {
        CodeTypeRef codeTypeRefDO = codeproperty.Type;
        return codeTypeRefDO;
    }

    public List<AttributeAndPropeperties> GetAttributesAndPropepertiesCollection(CodeElement element)
    {
        CodeElements attributes = null;

        var codeClass = element as CodeClass;
        if (codeClass != null)
            attributes = codeClass.Attributes;

        var codeProperty = element as CodeProperty;
        if (codeProperty != null)
            attributes = codeProperty.Attributes;

        var attributeCollection = new List<AttributeAndPropeperties>();
        var listOfStringProperties = new List<string>();

//            Regex attributesRegex = new Regex(@"\[\s*(?<Name>\w*)\s*(\((?<arguments>.*)\))?\s*\]", RegexOptions.IgnoreCase | RegexOptions.Multiline);
//            MatchCollection matchesAttrs = attributesRegex.Matches(attributeString);

        foreach (CodeAttribute ca in attributes)
        {
            var properties = ca.Value.ToString();
            var dictionaryOfAttributes = new Dictionary<string, string>();
            var countProperties = 0;
            listOfStringProperties.Clear();

            Regex attributesRegex = new Regex(@"(@""(?:""""|[^""])*"")|(""(?:\\""|\\r|\\n|\\t|\\\\|[^""\\])*"")",
                RegexOptions.IgnoreCase | RegexOptions.Multiline);
            MatchCollection matchesProperties = attributesRegex.Matches(properties);

            foreach (var property in matchesProperties)
            {
                properties = properties.Replace(property.ToString(), "%%string" + countProperties + "%%");
                listOfStringProperties.Add(property.ToString());
                countProperties++;
            }

            countProperties = 0;
            foreach (string property in properties.Split(',').ToList())
            {
                if (property.Contains("%%string"))
                {
                    if (property.Split(':', '=').Count() == 2)
                    {
                        if (property.Split(':', '=')[1].Contains("%%string"))
                            dictionaryOfAttributes.Add(property.Split(':', '=')[0],
                                listOfStringProperties[
                                    Convert.ToInt32(property.Split(':', '=')[1].Replace("%%string", "")
                                        .Replace("%", ""))].Replace("\"", ""));
                    }
                    else
                        dictionaryOfAttributes.Add(countProperties.ToString(),
                            listOfStringProperties[
                                Convert.ToInt32(property.Replace("%%string", "").Replace("%", ""))].Replace("\"", ""));
                }
                else
                {
                    if (property.Split(':', '=').Count() == 2)
                        dictionaryOfAttributes.Add(property.Split(':', '=')[0], property.Split(':', '=')[1]);
                    else
                        dictionaryOfAttributes.Add(countProperties.ToString(), property);
                }

                countProperties++;
            }

            attributeCollection.Add(new AttributeAndPropeperties
            {
                Name = ca.Name,
                Patameters = dictionaryOfAttributes
            });
        }
            
        return attributeCollection;
     }

    public bool IsExistSetterInCodeProperty(CodeProperty codeproperty)
    {
        try
        {
            if(codeproperty.Setter != null) 
            { 
                return true; 
            }
        }
        catch (Exception)
        {
            return false;
        }

        return false;
    }

    public bool IsExistGetterInCodeProperty(CodeProperty codeproperty)
    {
        try
        {
            if(codeproperty.Getter != null) 
            { 
                return true; 
            }
        }
        catch (Exception)
        {
            return false;
        }

        return false;
    }

    }

	
    public class AttributeAndPropeperties
    {
        public string Name { get; set; }
        public Dictionary<string, string> Patameters { get; set; }

        public string GetParameterByKeyName(string key)
        {
            return Patameters.FirstOrDefault(x => x.Key.ToString().Trim() == key).Value;
        }
    }

	    public class QueryTemplate
    {
        public string QueryType {get; set;}
        public string TableName {get; set;}
        public string[] Fields {get; set;}
        public string[] IgnoreFields {get; set;}
    }

public class vsProjectType
{
    public const string SolutionFolder = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
    public const string VisualBasic = "{F184B08F-C81C-45F6-A57F-5ABD9991F28F}";
    public const string VisualCSharp = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
    public const string VisualCPlusPlus = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";
    public const string VisualJSharp = "{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}";
    public const string WebProject = "{E24C65DC-7377-472b-9ABA-BC803B73C61A}";
}

#>